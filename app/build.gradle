apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

/// 应用com.google.protobuf
apply plugin: 'com.google.protobuf'

//rootProject Gradle 内置的
//弱类型语言   类型可以推到
//def myName = this.rootProject.ext.usename
//println "myname:":myName

//println ">>>>"${rootProject.ext.usename}

//定义变量
def app_android = this.getRootProject().ext.app_android


android {
    compileSdkVersion app_android.compileSdkVersion
    buildToolsVersion app_android.buildToolsVersion
    defaultConfig {
        applicationId "com.dxtdkwt.zzh.appframework"
        minSdkVersion app_android.minSdkVersion
        targetSdkVersion app_android.targetSdkVersion
        versionCode app_android.versionCode
        versionName app_android.versionName
        testInstrumentationRunner app_android.testInstrumentationRunner

        multiDexEnabled true
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    buildTypes {
        debug {
            buildConfigField("boolean", "isModule", String.valueOf(isModule))
            buildConfigField("String", "serverUrl", "\"${url.debug}\"")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion '29.0.0'
                }
            }
        }
    }
    //引入DataBinding函数库
    dataBinding {
        enabled = true
    }

    //打包时排除这两个文件
    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
    }

}

protobuf {
    //配置protoc编译器
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1'
    }
    //这里配置生成目录，编译后会在build的目录下生成对应的java文件
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.builtins {
                java {}
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation project(':baselibrary')
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation project(path: ':utilslibrary')
    implementation project(':networklibrary')
    implementation 'com.google.android.material:material:1.2.0-alpha04'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation project(path: ':ipc')

    implementation 'com.android.support:multidex:1.0.1'

    ///引入支持库
    implementation 'com.google.protobuf:protobuf-java:3.5.1'

    //集成话处理
    if (isModule) {
        implementation project(path: ':order')
    }
}
